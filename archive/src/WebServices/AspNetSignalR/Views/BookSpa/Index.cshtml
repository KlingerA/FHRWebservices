@{
    ViewBag.Title = "Index";
}

<h2>Book Service</h2>
<div data-ng-app="bookSPA" data-ng-controller="BookController as vm">
    <div>
        <span>Last Update Message: {{vm.lastUpdate}}</span>
    </div>
    <div>
        <ul>
            <li data-ng-repeat="book in vm.books">
                {{book.Title}} ({{book.Isbn}}) für {{book.Price}}
            </li>
        </ul>
    </div>

</div>

@section scripts{
    <script src="~/Scripts/jquery.signalR-2.2.0.min.js"></script>
    <!-- diese Ressource wird automatisch von SignalR generiert und enthält einen Proxy für die Hubs -->
    <script src="~/signalr/hubs"></script>
    <script src="~/Scripts/angular.min.js"></script>
    <script>
        // IIFE-Pattern
        (function () {
            var module = angular.module("bookSPA", []);
            module.factory("bookService", bookService);
            module.controller("BookController", bookController);


            bookController.$inject = ["$scope","bookService"];
            function bookController($scope, bookService) {
                var vm = this;
                vm.connected = false;
                vm.books = [];
                vm.lastUpdate = "";


                startSignalR();

                // code-smell: SignalR sollte in eigenen Service
                // ausgelagert werden. Für Demo-Zwecke so einfacher
                function startSignalR() {
                    var bookHub = $.connection.bookHub;

                    bookHub.client.bookUpdate = function (book, updateKind) {
                        $scope.$apply(function () {
                            vm.lastUpdate = "Buch " + book.Title + " wurde " + (updateKind === 0 ? "erzeugt" : "aktualisiert");

                            bookService.getBooks().then(function (books) {
                                vm.books = books;
                            });
                        });
                    };

                    $.connection.hub.start().done(function () {
                        $scope.$apply(function () {
                            vm.connected = true;

                            bookService.getBooks().then(function (books) {                                
                                vm.books = books;
                            });
                        });
                    });
                }

            }


            bookService.$inject = ["$http"];
            function bookService($http) {
                
                var url = "/api/books";

                return {
                    getBooks: getBooks
                };

                function getBooks() {
                    return $http.get(url).then(function (res) {
                        return res.data;
                    });
                }
            }

        })();
        

    </script>

}
